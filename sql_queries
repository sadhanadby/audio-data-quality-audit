CREATE DATABASE AudioDataQualityAudit;
USE AudioDataQualityAudit;

CREATE TABLE metadata (
    filename VARCHAR(255),
    genre VARCHAR(50),
    filepath VARCHAR(255)
);

ALTER TABLE metadata
ADD duration DECIMAL(10,8);

LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8/Uploads/metadata_fixed.csv'
INTO TABLE metadata
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

-- ==============================
-- Step 1: Data Overview
-- ==============================

-- 1. Total Records
-- Check how many records are available
SELECT COUNT(*) AS Total_Records 
FROM metadata;

-- 2. Sample Data
-- Preview the first 10 records
SELECT * FROM metadata LIMIT 10;

-- 3. Column Names and Data Types
-- Understand the structure of the table
DESCRIBE metadata;

-- 4. Unique Genres
-- Validate the genres available in the dataset
SELECT DISTINCT genre FROM metadata;

-- 5. File Path Consistency
-- Identify file path issues
SELECT COUNT(*)
FROM metadata
WHERE filepath NOT LIKE CONCAT('%', genre, '/%', filename);

-- ==============================
-- Step 2: Data Cleaning Validation
-- ==============================

-- 6. Missing values
-- Identified null or missing values for genre, filename, filepath
SELECT *
FROM metadata
WHERE genre IS NULL OR filename IS NULL OR filepath IS NULL;

-- 7. Check for incorrect file extentions
SELECT *
FROM metadata
WHERE filename NOT LIKE '%.wav';

-- 8. Check for duplicate entries
SELECT filename, genre, COUNT(*) 
FROM metadata
GROUP BY filename, genre
HAVING COUNT(*) > 1;

-- -- Result: No missing values, incorrect file extensions, or duplicates found.

-- ==========================================
-- Step 3: Exploratory Data Analysis (EDA)
-- ==========================================

-- 9. Genre Distribution
--  Question: How many tracks are there in each genre?
--  Why? To see which genres dominate and which are underrepresented.

SELECT genre, COUNT(*) AS track_count
FROM metadata
GROUP BY genre
ORDER BY track_count DESC;

-- 10. Duration Statistics per genre
-- Question: What is the average, minimum, and maximum duration for each genre?
-- Why? To detect outliers and understand genre-wise duration trends.

SELECT genre,
	COUNT(*) AS total_tracks,
    ROUND(AVG(duration), 2) AS avg_duration,
    MAX(duration) AS max_duartion,
    MIN(duration) AS min_duration
FROM metadata
GROUP BY genre
ORDER BY avg_duration;

-- 11. Track duration outliers
-- Question: Are there any tracks that are much shorter or longer than expected?
-- Why? To detect anomalies (corrupt/incomplete files).

SELECT *
FROM metadata
WHERE duration < 10 OR duration > 40
ORDER BY duration;

-- 12. Filepath Consistency Check
-- Question: Do all file paths contain the correct genre?
-- Why? To find misplaced or incorrectly labeled tracks.

SELECT * 
FROM metadata
WHERE filepath NOT LIKE CONCAT('%', genre, '%');

-- 13. Duplicate tracks
-- Question: Do we have tracks with the same name but different genres?
-- Why? To detect misclassifications.

SELECT filename, COUNT(DISTINCT genre) AS genre_count
FROM metadata
GROUP BY filename
HAVING genre_count > 1;

-- 14. Identical Filenames with Different Durations
-- Question: Are there tracks with the same filename but different durations?
-- Why? To identify inconsistencies or duplicate files.

SELECT filename, COUNT(DISTINCT duration) AS duration_variants
FROM metadata
GROUP BY filename
HAVING duration_variants > 1;


-- ==============================================
-- Step 4: Deep Dive Analysis & Business Insights
-- ==============================================

-- 15. Genre-Based analysis
-- Question: Which genres have the longest and shortest total duration?
-- Business Impact: Helps in understanding the overall listening time for each genre, which is valuable for audio streaming platforms to optimize recommendations.

SELECT genre, SUM(duration) AS total_duration
FROM metadata
GROUP BY genre
ORDER BY total_duration DESC;

-- Insight: 'hiphop' genre has the longest total duration whereas 'pop' genre has the shortest total duration.

-- 16. Genre-Based analysis 
-- Question: Which genre has the highest average track duration?
-- Business Impact: Useful for streaming services and playlist optimizations, as longer average track durations could indicate different listening behaviors.

SELECT genre, AVG(duration) AS avg_duration
FROM metadata
GROUP BY genre
ORDER BY avg_duration DESC;

-- 17. Track-level analysis
-- Question: Are there anomalies in track duration?
-- Business Impact: Identifies corrupt or incomplete files that could impact dataset quality.

WITH genre_avg AS (
	SELECT 
	    genre, 
	    AVG(duration) AS avg_duration, 
	    STDDEV(duration) AS std_dev
	FROM metadata
	GROUP BY genre
)
SELECT 
    m.filename, 
    m.genre, 
    m.duration, 
    g.avg_duration, 
    g.std_dev
FROM metadata m
JOIN genre_avg g ON m.genre = g.genre
WHERE m.duration < (g.avg_duration - 5 * g.std_dev)
OR m.duration > (g.avg_duration + 5 * g.std_dev);
